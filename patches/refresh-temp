Bottom: 8092f0e1849d9842e19f535d9e78cbda091c464a
Top:    d4c2205aa9a83226b9db9a7cecfe41f077f0de8e
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-16 20:06:44 +1300

Refresh of extended-to-stream

---

diff --git a/NEWS b/NEWS
index 5c2c634..49eb168 100644
--- a/NEWS
+++ b/NEWS
@@ -24,7 +24,11 @@ Improvements
   unittest TestResult API calls and the ExtendedTestResult API which testtools
   has supported into the StreamResult API. ExtendedToStreamResult also forwards
   calls made in the StreamResult API, permitting it to be used anywhere a 
-  StreamResult is used. (Robert Collins)
+  StreamResult is used. Key TestResult query methods like wasSuccessful and
+  shouldStop are synchronised with the StreamResult API calls, but the detailed
+  statistics like the list of errors are not - a separate consumer will be
+  created to support that.
+  (Robert Collins)
 
 * New test support class ``testtools.testresult.doubles.StreamResult``, which
   captures all the StreamResult events. (Robert Collins)
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 845ca98..0f33a71 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -886,7 +886,7 @@ class ExtendedToOriginalDecorator(object):
         return self.decorated.wasSuccessful()
 
 
-class ExtendedToStreamDecorator(object):
+class ExtendedToStreamDecorator(TestResult):
     """Permit using old TestResult API code with new StreamResult objects.
     
     This decorates a StreamResult and converts old (Python 2.6 / 2.7 /
@@ -897,11 +897,8 @@ class ExtendedToStreamDecorator(object):
     """
 
     def __init__(self, decorated):
+        super(ExtendedToStreamDecorator, self).__init__()
         self.decorated = decorated
-        self._tags = TagContext()
-        # Only used for old TestResults that do not have failfast.
-        self._failfast = False
-        # XXX: TODO: time handling is discarding timestamps at the moment.
 
     def __repr__(self):
         return '<%s %r>' % (self.__class__.__name__, self.decorated)
@@ -1027,31 +1024,15 @@ class ExtendedToStreamDecorator(object):
         except AttributeError:
             return
 
-    def _get_failfast(self):
-        return getattr(self.decorated, 'failfast', self._failfast)
-    def _set_failfast(self, value):
-        if safe_hasattr(self.decorated, 'failfast'):
-            self.decorated.failfast = value
-        else:
-            self._failfast = value
-    failfast = property(_get_failfast, _set_failfast)
-
     def progress(self, offset, whence):
         method = getattr(self.decorated, 'progress', None)
         if method is None:
             return
         return method(offset, whence)
 
-    @property
-    def shouldStop(self):
-        return self.decorated.shouldStop
-
     def startTestRun(self):
-        self._tags = TagContext()
-        try:
-            return self.decorated.startTestRun()
-        except AttributeError:
-            return
+        super(ExtendedToStreamDecorator, self).startTestRun()
+        self._saw_failure = False
 
     def stop(self):
         return self.decorated.stop()
@@ -1080,9 +1061,8 @@ class ExtendedToStreamDecorator(object):
         return method(a_datetime)
 
     def wasSuccessful(self):
-        return self.decorated.wasSuccessful()
-
-
+        return (super(ExtendedToStreamDecorator, self).wasSuccessful and 
+            not self._saw_failure)
 
 
 class TestResultDecorator(object):
