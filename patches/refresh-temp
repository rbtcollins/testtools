Bottom: 42a9e530d5fd67f2b314c770a7d7a12223fff592
Top:    b3b29f68fb97a86b02e46de51ddb4015b2dc6e20
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-19 00:05:35 +1300

Refresh of extended-to-stream

---

diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 98ec9d1..6980cc3 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -1135,15 +1135,9 @@ class ExtendedToStreamDecorator(CopyStreamResult, StreamSummary, TestControl):
 
     def __init__(self, decorated):
         super(ExtendedToStreamDecorator, self).__init__([decorated])
-        # Deal with failure to call startTestRun (old clients)
-        # - XXX note that as this forwards events we should defer
-        # this until a method / lookup is done without calling startTestRun and
-        # then trigger startTestRun.
-        self._tags = TagContext()
-        self.__now = None
-        StreamSummary.startTestRun(self)
         # Deal with mismatched base class constructors.
         TestControl.__init__(self)
+        self._started = False
 
     def _get_failfast(self):
         return len(self.targets) == 2
@@ -1157,6 +1151,8 @@ class ExtendedToStreamDecorator(CopyStreamResult, StreamSummary, TestControl):
     failfast = property(_get_failfast, _set_failfast)
 
     def startTest(self, test):
+        if not self._started:
+            self.startTestRun()
         self.status(test.id(), 'inprogress', timestamp=self._now())
         self._tags = TagContext(self._tags)
 
@@ -1169,6 +1165,8 @@ class ExtendedToStreamDecorator(CopyStreamResult, StreamSummary, TestControl):
     addFailure=addError
 
     def _convert(self, test, err, details, status, reason=None):
+        if not self._started:
+            self.startTestRun()
         test_id = test.id()
         now = self._now()
         if err is not None:
@@ -1218,6 +1216,11 @@ class ExtendedToStreamDecorator(CopyStreamResult, StreamSummary, TestControl):
         self._tags = TagContext()
         self.shouldStop = False
         self.__now = None
+        self._started = True
+
+    def stopTestRun(self):
+        super(ExtendedToStreamDecorator, self).stopTestRun()
+        self._started = False
 
     def stopTest(self, test):
         self._tags = self._tags.parent
@@ -1250,6 +1253,11 @@ class ExtendedToStreamDecorator(CopyStreamResult, StreamSummary, TestControl):
     def time(self, a_datetime):
         self.__now = a_datetime
 
+    def wasSuccessful(self):
+        if not self._started:
+            self.startTestRun()
+        return super(ExtendedToStreamDecorator, self).wasSuccessful()
+
 
 class TestResultDecorator(object):
     """General pass-through decorator.
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index f7ab6b2..9d5af0f 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -232,18 +232,21 @@ class TagsContract(Python27Contract):
     def test_no_tags_by_default(self):
         # Results initially have no tags.
         result = self.makeResult()
+        result.startTestRun()
         self.assertEqual(frozenset(), result.current_tags)
 
     def test_adding_tags(self):
         # Tags are added using 'tags' and thus become visible in
         # 'current_tags'.
         result = self.makeResult()
+        result.startTestRun()
         result.tags(set(['foo']), set())
         self.assertEqual(set(['foo']), result.current_tags)
 
     def test_removing_tags(self):
         # Tags are removed using 'tags'.
         result = self.makeResult()
+        result.startTestRun()
         result.tags(set(['foo']), set())
         result.tags(set(), set(['foo']))
         self.assertEqual(set(), result.current_tags)
@@ -251,6 +254,7 @@ class TagsContract(Python27Contract):
     def test_startTestRun_resets_tags(self):
         # startTestRun makes a new test run, and thus clears all the tags.
         result = self.makeResult()
+        result.startTestRun()
         result.tags(set(['foo']), set())
         result.startTestRun()
         self.assertEqual(set(), result.current_tags)
