Bottom: 89db281a37a1e201a4bbf75627667670096cc589
Top:    157256fe1ec0b129293d7284b24508f4c58cdc02
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-24 00:56:20 +1300

Refresh of threadsafestreamresult

---

diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 1b17d99..231085e 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -653,26 +653,18 @@ class ThreadsafeStreamResult(StreamResult):
         self.semaphore = semaphore
         self.routing_code = routing_code
 
-    def file(self, file_name, file_bytes, eof=False, mime_type=None,
-        test_id=None, route_code=None, timestamp=None):
+    def status(self, test_id=None, test_status=None, test_tags=None,
+        runnable=True, file_name=None, file_bytes=None, eof=False,
+        mime_type=None, route_code=None, timestamp=None):
         self.semaphore.acquire()
         try:
-            self.result.file(file_name, file_bytes, eof=eof,
-                mime_type=mime_type, test_id=test_id,
+            self.result.status(test_id=test_id, test_status=test_status,
+                test_tags=test_tags, runnable=runnable, file_name=file_name,
+                file_bytes=file_bytes, eof=eof, mime_type=mime_type,
                 route_code=self.route_code(route_code), timestamp=timestamp)
         finally:
             self.semaphore.release()
 
-    def status(self, test_id, test_status, test_tags=None, runnable=True,
-        route_code=None, timestamp=None):
-        self.semaphore.acquire()
-        try:
-            self.result.status(test_id, test_status, test_tags=test_tags,
-                runnable=runnable, route_code=self.route_code(route_code),
-                timestamp=timestamp)
-        finally:
-            self.semaphore.release()
-
     def route_code(self, route_code):
         """Adjust route_code on the way through."""
         if route_code is None:
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index a4f8748..cc21d7d 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -1608,48 +1608,34 @@ class TestThreadStreamResult(TestCase):
         return (ThreadsafeStreamResult(target, semaphore, "foo"),
             semaphore)
 
-    def test_file(self):
-        class CallbackStream(object):
-            def file(stream, file_name, file_bytes, eof=False, mime_type=None,
-                test_id=None, route_code=None, timestamp=None):
-                self.assertFalse(semaphore.acquire(False))
-                self.assertEqual("file", file_name)
-                self.assertEqual(_b("content"), file_bytes)
-                self.assertEqual(True, eof)
-                self.assertEqual("quux", mime_type)
-                self.assertEqual("test", test_id)
-                self.assertEqual(expected_route, route_code)
-                self.assertEqual(expected_time, timestamp)
-        result, semaphore = self.make_result(CallbackStream())
-        expected_route = "foo"
-        expected_time = None
-        result.file("file", _b("content"), eof=True, mime_type="quux",
-            test_id="test", route_code=None, timestamp=None)
-        expected_route = "foo/bar"
-        expected_time = datetime.datetime.now(utc)
-        result.file("file", _b("content"), eof=True, mime_type="quux",
-            test_id="test", route_code="bar", timestamp=expected_time)
-
     def test_status(self):
         class CallbackStream(object):
-            def status(stream, test_id, test_status, test_tags=None, runnable=True,
-                route_code=None, timestamp=None):
+            def status(stream, test_id=None, test_status=None, test_tags=None,
+                runnable=True, file_name=None, file_bytes=None, eof=False,
+                mime_type=None, route_code=None, timestamp=None):
                 self.assertFalse(semaphore.acquire(False))
                 self.assertEqual("test", test_id)
                 self.assertEqual("fail", test_status)
                 self.assertEqual(set(["quux"]), test_tags)
                 self.assertEqual(False, runnable)
+                self.assertEqual("file", file_name)
+                self.assertEqual(_b("content"), file_bytes)
+                self.assertEqual(True, eof)
+                self.assertEqual("quux", mime_type)
+                self.assertEqual("test", test_id)
                 self.assertEqual(expected_route, route_code)
                 self.assertEqual(expected_time, timestamp)
         result, semaphore = self.make_result(CallbackStream())
         expected_route = "foo"
         expected_time = None
         result.status("test", "fail", test_tags=set(["quux"]), runnable=False,
-            route_code=None, timestamp=None)
+            file_name="file", file_bytes=_b("content"), eof=True,
+            mime_type="quux", route_code=None, timestamp=None)
         expected_route = "foo/bar"
         expected_time = datetime.datetime.now(utc)
         result.status("test", "fail", test_tags=set(["quux"]), runnable=False,
-            route_code="bar", timestamp=expected_time)
+            file_name="file", file_bytes=_b("content"), eof=True,
+            mime_type="quux", route_code="bar", timestamp=expected_time)
 
     def testStartTestRun(self):
         t = object()
diff --git a/testtools/tests/test_testsuite.py b/testtools/tests/test_testsuite.py
index 85988d1..57f79f9 100644
--- a/testtools/tests/test_testsuite.py
+++ b/testtools/tests/test_testsuite.py
@@ -116,6 +116,10 @@ class TestConcurrentStreamTestSuiteRun(TestCase):
              'inprogress',
              None,
              True,
+             None,
+             None,
+             False,
+             None,
              '0',
              None,
              ),
@@ -124,6 +128,10 @@ class TestConcurrentStreamTestSuiteRun(TestCase):
              'success',
              frozenset(),
              True,
+             None,
+             None,
+             False,
+             None,
              '0',
              None,
              ),
@@ -132,6 +140,10 @@ class TestConcurrentStreamTestSuiteRun(TestCase):
              'inprogress',
              None,
              True,
+             None,
+             None,
+             False,
+             None,
              '1',
              None,
              ),
@@ -140,10 +152,14 @@ class TestConcurrentStreamTestSuiteRun(TestCase):
              'success',
              frozenset(),
              True,
+             None,
+             None,
+             False,
+             None,
              '1',
              None,
              ),
-            ]), set(event[0:3] + (freeze(event[3]),) + event[4:6] + (None,)
+            ]), set(event[0:3] + (freeze(event[3]),) + event[4:10] + (None,)
                 for event in result._events))
 
     def test_broken_runner(self):
@@ -161,25 +177,24 @@ class TestConcurrentStreamTestSuiteRun(TestCase):
         suite.run(result)
         events = result._events
         # Check the traceback loosely.
-        self.assertThat(events[1][2].decode('utf8'), DocTestMatches("""\
+        self.assertThat(events[1][6].decode('utf8'), DocTestMatches("""\
 Traceback (most recent call last):
   File "...testtools/testsuite.py", line 188, in _run_test
     test.run(process_result)
 TypeError: run() takes ...1 ...argument (2 given)
 """, doctest.ELLIPSIS))
-        events = [event[0:6] + (None,) for event in events]
-        events[1] = events[1][:2] + (None,) + events[1][3:]
+        events = [event[0:10] + (None,) for event in events]
+        events[1] = events[1][:6] + (None,) + events[1][7:]
         self.assertEqual([
-            ('status', "broken-runner-'0'", 'inprogress', None, True, _u('0'), None),
-            ('file', 'traceback', None,
+            ('status', "broken-runner-'0'", 'inprogress', None, True, None, None, False, None, _u('0'), None),
+            ('status', "broken-runner-'0'", None, None, True, 'traceback', None,
              False,
              'text/x-traceback; charset="utf8"; language="python"',
-             "broken-runner-'0'",
+             '0',
              None),
-             ('file', 'traceback', _b(''), True,
-              'text/x-traceback; charset="utf8"; language="python"',
-              "broken-runner-'0'", None),
-             ('status', "broken-runner-'0'", 'fail', set(), True, _u('0'), None)
+             ('status', "broken-runner-'0'", None, None, True, 'traceback', b'', True,
+              'text/x-traceback; charset="utf8"; language="python"', '0', None),
+             ('status', "broken-runner-'0'", 'fail', set(), True, None, None, False, None, _u('0'), None)
             ], events)
 
     def split_suite(self, suite):
