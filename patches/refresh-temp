Bottom: 8cbc4e77e6f35948a7a28fe983a424c91c038705
Top:    7e0a1279380304de8bf418e71c04ea839128208d
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-03-03 16:03:40 +1300

Refresh of decorate-testcase-result

---

diff --git a/testtools/testcase.py b/testtools/testcase.py
index 0f9b041..bac718d 100644
--- a/testtools/testcase.py
+++ b/testtools/testcase.py
@@ -863,19 +863,32 @@ class Nullary(object):
 class DecorateTestCaseResult(object):
     """Decorate a TestCase and permit customisation of the result for runs."""
 
-    def __init__(self, case, callout):
+    def __init__(self, case, callout, before_run=None, after_run=None):
         """Construct a DecorateTestCaseResult.
 
         :param case: The case to decorate.
         :param callout: A callback to call when run/__call__/debug is called.
             Must take a result parameter and return a result object to be used.
             For instance: lambda result: result.
+        :param before_run: If set, call this with the decorated result before
+            calling into the decorated run/__call__ method.
+        :param before_run: If set, call this with the decorated result after
+            calling into the decorated run/__call__ method.
         """
         self.decorated = case
         self.callout = callout
+        self.before_run = before_run
+        self.after_run = after_run
 
     def run(self, result=None):
-            return self.decorated.run(self.callout(result))
+            result = self.callout(result)
+            if self.before_run:
+                self.before_run(result)
+            try:
+                return self.decorated.run(result)
+            finally:
+                if self.after_run:
+                    self.after_run(result)
 
     def __call__(self, result=None):
             return self.decorated(self.callout(result))
diff --git a/testtools/tests/test_testcase.py b/testtools/tests/test_testcase.py
index afe58df..fccc482 100644
--- a/testtools/tests/test_testcase.py
+++ b/testtools/tests/test_testcase.py
@@ -1467,6 +1467,21 @@ class TestDecorateTestCaseResult(TestCase):
             ('tags', set(), set())
             ], self.log)
 
+    def test_before_after_hooks(self):
+        case = DecorateTestCaseResult(PlaceHolder('foo'), self.make_result,
+            before_run=lambda result: self.log.append('before'),
+            after_run=lambda result: self.log.append('after'))
+        case.run(None)
+        self.assertEqual([None,
+            'before',
+            ('tags', set(), set()),
+            ('startTest', case.decorated),
+            ('addSuccess', case.decorated),
+            ('stopTest', case.decorated),
+            ('tags', set(), set()),
+            'after',
+            ], self.log)
+
     def test_other_attribute(self):
         orig = PlaceHolder('foo')
         orig.thing = 'fred'
