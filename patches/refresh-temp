Bottom: e7a9bf354672326265d3ea26dc4300c6d0860bda
Top:    c3ba5b78bca0f51e8b47d134275d033dfffe58e6
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-17 13:09:58 +1300

Refresh of stream-summary

---

diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 75ee05b..73af7cb 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -26,6 +26,9 @@ from testtools.content import (
     TracebackContent,
     )
 from testtools.tags import TagContext
+# circular import
+# from testtools.testcase import PlaceHolder
+PlaceHolder = None
 
 # From http://docs.python.org/library/datetime.html
 _ZERO = datetime.timedelta(0)
@@ -415,6 +418,55 @@ class StreamSummary(StreamResult):
         self.skipped = []
         self.expectedFailures = []
         self.unexpectedSuccesses = []
+        # Maps (id, route_code) -> a PlaceHolder
+        global PlaceHolder
+        from testtools.testcase import PlaceHolder
+        self._inprogress = {}
+        self._handle_final_status = {
+            'success': self._success,
+            'skip': self._skip,
+            'exists': self._exists,
+            'fail': self._fail,
+            'xfail': self._xfail,
+            'uxsuccess': self._uxsuccess,
+            }
+
+    def stopTestRun(self):
+        super(StreamSummary, self).stopTestRun()
+        self.testsRun += len(self._inprogress)
+        self.errors.extend(self._inprogress.values())
+
+    def status(self, test_id, test_status, test_tags=None, runnable=True,
+        route_code=None, timestamp=None):
+        super(StreamSummary, self).status(test_id, test_status,
+            test_tags=test_tags, runnable=runnable, route_code=route_code,
+            timestamp=timestamp)
+        key = (test_id, route_code)
+        if key not in self._inprogress:
+            self._inprogress[key] = PlaceHolder(test_id, outcome='unknown')
+        if test_status != 'inprogress':
+            case = self._inprogress.pop(key)
+            self._handle_final_status[test_status](
+                case, test_tags, runnable, route_code, timestamp)
+    
+    def _success(self, case, test_tags, runnable, route_code, timestamp):
+        pass
+
+    def _skip(self, case, test_tags, runnable, route_code, timestamp):
+        case._outcome = 'addSkip'
+        self.skipped.append(case)
+
+    def _exists(self, case, test_tags, runnable, route_code, timestamp):
+        pass
+
+    def _fail(self, case, test_tags, runnable, route_code, timestamp):
+        pass
+
+    def _xfail(self, case, test_tags, runnable, route_code, timestamp):
+        pass
+
+    def _uxsuccess(self, case, test_tags, runnable, route_code, timestamp):
+        pass
 
     def wasSuccessful(self):
         """Return False if any failure has occured.
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 147588d..227ac2f 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -54,6 +54,7 @@ from testtools.matchers import (
     Contains,
     DocTestMatches,
     Equals,
+    HasLength,
     MatchesAny,
     MatchesException,
     Raises,
@@ -690,16 +691,40 @@ class TestStreamSummary(TestCase):
         result.unexpectedSuccesses.append('x')
         self.assertEqual(False, result.wasSuccessful())
 
-    def test_inprogress_tests_generate_failures(self):
+    def test_stopTestRun(self):
         result = StreamSummary()
         # terminal successful codes.
         result.startTestRun()
+        result.status("foo", "inprogress")
         result.status("foo", "success")
         result.status("bar", "skip")
         result.status("baz", "exists")
         result.stopTestRun()
         self.assertEqual(True, result.wasSuccessful())
-        # errored tests, incomplete 
+        # Tests inprogress at stopTestRun trigger a failure.
+        result.startTestRun()
+        result.status("foo", "inprogress")
+        result.stopTestRun()
+        self.assertEqual(False, result.wasSuccessful())
+        # interim state detection handles route codes - while duplicate ids in
+        # one run is undesirable, it may happen (e.g. with repeated tests).
+        result.startTestRun()
+        result.status("foo", "inprogress")
+        result.status("foo", "inprogress", route_code="A")
+        result.status("foo", "success", route_code="A")
+        result.stopTestRun()
+        self.assertEqual(False, result.wasSuccessful())
+
+    def test_status_skip(self):
+        # when skip is seen, a synthetic test is reported with reason captured
+        # from the 'reason' file attachment if any.
+        result = StreamSummary()
+        result.startTestRun()
+        result.file("reason", _b("Missing dependency"), eof=True,
+            mime_type="text/plain; charset=utf8", test_id="foo.bar")
+        result.status("foo.bar", "skip")
+        self.assertThat(result.skipped, HasLength(1))
+
 
 
 class TestTestResult(TestCase):
