Bottom: f37178121797e9626e50b57cee47dd45c73d593e
Top:    ff366df14fc2a4b7cb1de5693f6dacd256163fed
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-19 22:09:11 +1300

Refresh of threadsafestreamresult

---

diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index cd76ada..a4b54d2 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -327,9 +327,9 @@ A variant of ConcurrentTestSuite that uses the new StreamResult API instead of
 the TestResult API. ConcurrentStreamTestSuite coordinates running some number
 of test/suites concurrently, with one ThreadsafeStreamResult per test/suite.
 
-Each test/suite gets given its own ExtendedToStreamDecorator wrapped
-ThreadsafeStreamResult instance, forwarding onto the StreamResult that
-ConcurrentStreamTestSuite.run was called with.
+Each test/suite gets given its own ExtendedToStreamDecorator +
+TimestampingStreamResult wrapped ThreadsafeStreamResult instance, forwarding
+onto the StreamResult that ConcurrentStreamTestSuite.run was called with.
 
 ConcurrentStreamTestSuite is a thin shim and it is easy to implement your own
 specialised form if that is needed.
diff --git a/testtools/testsuite.py b/testtools/testsuite.py
index b45ecf5..8c6d84b 100644
--- a/testtools/testsuite.py
+++ b/testtools/testsuite.py
@@ -153,8 +153,9 @@ class ConcurrentStreamTestSuite(unittest.TestSuite):
             semaphore = threading.Semaphore(1)
             for test, route_code in tests:
                 process_result = testtools.ExtendedToStreamDecorator(
+                    testtools.TimestampingStreamResult(
                     testtools.ThreadsafeStreamResult(
-                        result, semaphore, route_code))
+                        result, semaphore, route_code)))
                 reader_thread = threading.Thread(
                     target=self._run_test, args=(test, process_result, queue))
                 threads[test] = reader_thread, process_result
