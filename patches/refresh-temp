Bottom: ccdcdf3354d2635e0cbf7b01224a1d234c7f2250
Top:    8b02efd8baba90968a6dbfe925963d3c0e860678
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-03-06 22:55:45 +1300

Refresh of test-control

---

diff --git a/NEWS b/NEWS
index 12237fd..6cd3519 100644
--- a/NEWS
+++ b/NEWS
@@ -34,7 +34,7 @@ Improvements
 * New support class ``TestControl`` which permits cancelling an in-progress
   run. (Robert Collins)
 
-* New support class ``StreamFailfast`` which calls a ``TestControl`` instance
+* New support class ``StreamFailFast`` which calls a ``TestControl`` instance
   to abort the test run when a failure is detected. (Robert Collins)
 
 * New ``TestCase`` decorator ``DecorateTestCaseResult`` that adapts the
diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index d97df6d..7162e97 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -175,7 +175,7 @@ TestControl
 Lastly we define the ``TestControl`` API which is used to provide the
 ``shouldStop`` and ``stop`` elements from ``TestResult``. Again, see the API
 documentation for ``testtools.TestControl``. ``TestControl`` can be paired with
-a ``StreamFailfast`` to trigger failing aborting a test run when a failure
+a ``StreamFailFast`` to trigger failing aborting a test run when a failure
 is observed. Aborting multiple workers in a distributed environment requires
 hooking whatever signalling mechanism the distributed environment has up to
 a ``TestControl`` in each worker process.
diff --git a/testtools/__init__.py b/testtools/__init__.py
index 6f860d0..8b45e5e 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -27,7 +27,7 @@ __all__ = [
     'skip',
     'skipIf',
     'skipUnless',
-    'StreamFailfast',
+    'StreamFailFast',
     'StreamResult',
     'StreamSummary',
     'StreamToDict',
@@ -75,7 +75,7 @@ else:
         CopyStreamResult,
         ExtendedToOriginalDecorator,
         MultiTestResult,
-        StreamFailfast,
+        StreamFailFast,
         StreamResult,
         StreamSummary,
         StreamToDict,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index 435cb32..cc00e57 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -6,7 +6,7 @@ __all__ = [
     'CopyStreamResult',
     'ExtendedToOriginalDecorator',
     'MultiTestResult',
-    'StreamFailfast',
+    'StreamFailFast',
     'StreamResult',
     'StreamSummary',
     'StreamToDict',
@@ -23,7 +23,7 @@ from testtools.testresult.real import (
     CopyStreamResult,
     ExtendedToOriginalDecorator,
     MultiTestResult,
-    StreamFailfast,
+    StreamFailFast,
     StreamResult,
     StreamSummary,
     StreamToDict,
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 343412d..fde4a0d 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -6,7 +6,7 @@ __metaclass__ = type
 __all__ = [
     'ExtendedToOriginalDecorator',
     'MultiTestResult',
-    'StreamFailfast',
+    'StreamFailFast',
     'StreamResult',
     'StreamSummary',
     'StreamToDict',
@@ -402,7 +402,7 @@ class CopyStreamResult(StreamResult):
         domap(methodcaller('status', *args, **kwargs), self.targets)
 
 
-class StreamFailfast(StreamResult):
+class StreamFailFast(StreamResult):
     """Call the supplied callback if an error is seen in a stream."""
 
     def __init__(self, callback):
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index dbf8f45..1e137ad 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -22,7 +22,7 @@ from testtools import (
     ExtendedToOriginalDecorator,
     MultiTestResult,
     PlaceHolder,
-    StreamFailfast,
+    StreamFailFast,
     StreamResult,
     StreamSummary,
     StreamToDict,
@@ -548,10 +548,10 @@ class TestStreamToDictContract(TestCase, TestStreamResultContract):
         return StreamToDict(lambda x:None)
 
 
-class TestStreamFailfastContract(TestCase, TestStreamResultContract):
+class TestStreamFailFastContract(TestCase, TestStreamResultContract):
 
     def _make_result(self):
-        return StreamFailfast(lambda:None)
+        return StreamFailFast(lambda:None)
 
 
 class TestDoubleStreamResultEvents(TestCase):
@@ -708,44 +708,44 @@ class TestStreamToDict(TestCase):
         self.assertEqual(["C", None], tests[1]['timestamps'])
 
 
-class TestStreamFailfast(TestCase):
+class TestStreamFailFast(TestCase):
 
     def test_inprogress(self):
-        result = StreamFailfast(self.fail)
+        result = StreamFailFast(self.fail)
         result.status('foo', 'inprogress')
 
     def test_exists(self):
-        result = StreamFailfast(self.fail)
+        result = StreamFailFast(self.fail)
         result.status('foo', 'exists')
 
     def test_xfail(self):
-        result = StreamFailfast(self.fail)
+        result = StreamFailFast(self.fail)
         result.status('foo', 'xfail')
 
     def test_uxsuccess(self):
         calls = []
         def hook():
             calls.append("called")
-        result = StreamFailfast(hook)
+        result = StreamFailFast(hook)
         result.status('foo', 'uxsuccess')
         result.status('foo', 'uxsuccess')
         self.assertEqual(['called', 'called'], calls)
 
     def test_success(self):
-        result = StreamFailfast(self.fail)
+        result = StreamFailFast(self.fail)
         result.status('foo', 'success')
 
     def test_fail(self):
         calls = []
         def hook():
             calls.append("called")
-        result = StreamFailfast(hook)
+        result = StreamFailFast(hook)
         result.status('foo', 'fail')
         result.status('foo', 'fail')
         self.assertEqual(['called', 'called'], calls)
 
     def test_skip(self):
-        result = StreamFailfast(self.fail)
+        result = StreamFailFast(self.fail)
         result.status('foo', 'skip')
