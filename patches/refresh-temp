Bottom: 1193995dd306bd925e06b1ea09f1c819bce9a194
Top:    8315c09e2eae26949b3ae447b152c7908c111587
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-18 23:38:01 +1300

Refresh of stream-summary

---

diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 8d2999b..8c382d6 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -497,6 +497,32 @@ class StreamToDict(StreamResult):
         return key
 
 
+_status_map = {
+    'inprogress': 'addFailure',
+    'unknown': 'addFailure',
+    'success': 'addSuccess',
+    'skip': 'addSkip',
+    'fail': 'addFailure',
+    'xfail': 'addExpectedFailure',
+    'uxsuccess': 'addUnexpectedSuccess',
+    }
+
+
+def test_dict_to_case(test_dict):
+    """Convert a test dict into a TestCase objection.
+
+    :param test_dict: A test dict as generated by StreamToDict.
+    :return: A PlaceHolder test object.
+    """
+    # Circular import.
+    global PlaceHolder
+    if PlaceHolder is None:
+        from testtools.testcase import PlaceHolder
+    outcome = _status_map[test_dict['status']]
+    return PlaceHolder(test_dict['id'], outcome=outcome,
+        details=test_dict['details'])
+
+
 class StreamSummary(StreamToDict):
     """A specialised StreamResult that summarises a stream.
     
@@ -507,15 +533,6 @@ class StreamSummary(StreamToDict):
 
     def __init__(self):
         super(StreamSummary, self).__init__(self._gather_test)
-        self._status_map = {
-            'inprogress': 'addFailure',
-            'unknown': 'addFailure',
-            'success': 'addSuccess',
-            'skip': 'addSkip',
-            'fail': 'addFailure',
-            'xfail': 'addExpectedFailure',
-            'uxsuccess': 'addUnexpectedSuccess',
-            }
         self._handle_status = {
             'success': self._success,
             'skip': self._skip,
@@ -535,9 +552,6 @@ class StreamSummary(StreamToDict):
         self.skipped = []
         self.expectedFailures = []
         self.unexpectedSuccesses = []
-        # Circular import.
-        global PlaceHolder
-        from testtools.testcase import PlaceHolder
 
     def wasSuccessful(self):
         """Return False if any failure has occured.
@@ -551,9 +565,7 @@ class StreamSummary(StreamToDict):
         self.testsRun += 1
         if test_dict['status'] == 'exists':
             return
-        outcome = self._status_map[test_dict['status']]
-        case = PlaceHolder(test_dict['id'], outcome=outcome,
-            details=test_dict['details'])
+        case = test_dict_to_case(test_dict)
         self._handle_status[test_dict['status']](case)
 
     def _incomplete(self, case):
