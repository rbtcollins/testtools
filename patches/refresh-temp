Bottom: ffeb331853dcfa921f2bff1dc2ead576458baf0d
Top:    3b646a7ff105997767805abf8f408996098d3c97
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-26 21:30:33 +1300

Refresh of streamresult-router

---

diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 6a720e0..b2711c8 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -441,6 +441,8 @@ class StreamResultRouter(StreamResult):
     the behaviour is undefined. Only a single route is chosen for any event.
     """
 
+    policies = {}
+
     def __init__(self, fallback=None):
         """Construct a StreamResultRouter with optional fallback.
 
@@ -449,20 +451,26 @@ class StreamResultRouter(StreamResult):
         """
         self.fallback = fallback
         self._route_code_prefixes = {}
+        self._test_ids = {}
 
     def status(self, **kwargs):
         route_code = kwargs.get('route_code', None)
+        test_id = kwargs.get('test_id', None)
         if route_code is not None:
             prefix = route_code.split('/')[0]
         else:
             prefix = route_code
-        target, consume_route = self._route_code_prefixes.get(
-            prefix, (self.fallback, False))
-        if route_code is not None and consume_route:
-            route_code = route_code[len(prefix) + 1:]
-            if not route_code:
-                route_code = None
-            kwargs['route_code'] = route_code
+        if prefix in self._route_code_prefixes:
+            target, consume_route = self._route_code_prefixes[prefix]
+            if route_code is not None and consume_route:
+                route_code = route_code[len(prefix) + 1:]
+                if not route_code:
+                    route_code = None
+                kwargs['route_code'] = route_code
+        elif test_id in self._test_ids:
+            target = self._test_ids[test_id]
+        else:
+            target = self.fallback
         target.status(**kwargs)
 
     def map(self, sink, policy, **policy_args):
@@ -470,26 +478,37 @@ class StreamResultRouter(StreamResult):
 
         :param sink: A StreamResult to receive events.
         :param policy: A routing policy. Valid policies are
-            'route_code_prefix'.
+            'route_code_prefix' and 'test_id'.
 
         route_code_prefix routes events based on a prefix of the route code in
         the event. It takes the following arguments::
         :param route_prefix: A prefix to match on - e.g. '0'.
         :param consume_route: If True, remove the prefix from the route_code
             when forwarding events.
+
+        test_id routes events based on the test id::
+        :param test_id: The test id to route on. Use None to select non-test
+            events.
+
+        map may raise errors::
         :raises: ValueError if the policy is unknown
         :raises: TypeError if the policy is given arguments it cannot handle.
         """
-        if policy != 'route_code_prefix':
+        policy_method = StreamResultRouter.policies.get(policy, None)
+        if not policy_method:
             raise ValueError("bad policy %r" % (policy,))
-        self._map_route_code_prefix(sink, **policy_args)
+        policy_method(self, sink, **policy_args)
 
     def _map_route_code_prefix(self, sink, route_prefix, consume_route=False):
         if '/' in route_prefix:
             raise TypeError(
                 "%r is more than one route step long" % (route_prefix,))
         self._route_code_prefixes[route_prefix] = (sink, consume_route)
+    policies['route_code_prefix'] = _map_route_code_prefix
 
+    def _map_test_id(self, sink, test_id):
+        self._test_ids[test_id] = sink
+    policies['test_id'] = _map_test_id
 
 class StreamToDict(StreamResult):
     """A specialised StreamResult that emits a callback as tests complete.
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 9b53790..95ea1b9 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -1706,6 +1706,20 @@ class TestStreamResultRouter(TestCase):
             ],
             fallback._events)
 
+    def test_map_test_id(self):
+        nontest = LoggingStreamResult()
+        test = LoggingStreamResult()
+        router = StreamResultRouter(test)
+        router.map(nontest, 'test_id', test_id=None)
+        router.status(test_id='foo', file_name="bar", file_bytes=b'')
+        router.status(file_name="bar", file_bytes=b'')
+        self.assertEqual([
+            ('status', 'foo', None, None, True, 'bar', b'', False, None, None,
+             None),], test._events)
+        self.assertEqual([
+            ('status', None, None, None, True, 'bar', b'', False, None, None,
+             None),], nontest._events)
+
 
 class TestThreadStreamResult(TestCase):
