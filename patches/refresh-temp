Bottom: 581a9f45647d396744a0f2bc98195faa23ee2c18
Top:    fd95e19d033db6ea3781a3ee429f0ef3c60f36df
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-16 21:19:34 +1300

Refresh of define-stream-result

---

diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index 5e7d8dd..3bb4222 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -111,6 +111,60 @@ e.g.::
 Extensions to TestResult
 ========================
 
+StreamResult
+------------
+
+``StreamResult`` is a new API for dealing with test case progress that supports
+concurrent and distributed testing without the various issues that
+``TestResult`` has such as buffering in multiplexers.
+
+The design has several key principles:
+
+* Nothing that requires up-front knowledge of all tests.
+
+* Deal with tests running in concurrent environments, potentially distributed
+  across multiple processes (or even machines). This implies allowing multiple
+  tests to be active at once, supplying time explicitly, being able to
+  differentiate between tests running in different contexts and removing any
+  assumption that tests are necessarily in the same process.
+
+* Make the API as simple as possible - each aspect should do one thing well.
+
+The ``TestResult`` API this is intended to replace has three different clients.
+The testrunner running tests uses the API to find out whether the test run had
+errors, how many tests ran and so on. Secondly each executing ``TestCase``
+notifies the ``TestResult`` about activity. Finally, each ``TestCase`` queries
+the ``TestResult`` to see whether the test run should be aborted.
+
+With ``StreamResult`` we need to be able to provide a ``TestResult`` compatible
+adapter, to allow incremental migration. However, we don't need to conflate
+things long term. So - we define three separate APIs. Firstly there is the
+``StreamResult`` API which handles events generated by running tests. See the
+API documentation for ``testtools.StreamResult`` for details.
+
+StreamSummary
+-------------
+
+Secondly we define the ``StreamSummary`` API which takes responsibility for
+collating errors, detecting incomplete tests and counting tests. This provides
+a compatible API with those aspects of ``TestResult``. Again, see the API
+documentation for ``testtools.StreamSummary``.
+
+TestControl
+-----------
+
+Lastly we define the ``TestControl`` API which is used to provide the
+``shouldStop`` and ``stop`` elements from ``TestResult``. Again, see the API
+documentation for ``testtools.TestControl``.
+
+ThreadsafeStreamResult
+----------------------
+
+This is a ``StreamResult`` decorator for reporting tests from multiple threads
+at once. Each method takes out a lock around the decorated result to prevent
+race conditions. The ``startTestRun`` and ``stopTestRun`` methods are not
+forwarded to prevent the decorated result having them called multiple times.
+
 TestResult.addSkip
 ------------------
