Bottom: 1b99ea48ced884eb0b687d567a6340f4577adb57
Top:    f3cb66112e35dfb3fb7ce2d5156ccb087e498c47
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-17 16:11:52 +1300

Refresh of stream-summary

---

diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 787e3a4..fe49701 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -473,6 +473,7 @@ class StreamSummary(StreamResult):
             case = self._inprogress.pop(key)
             self._handle_final_status[test_status](
                 case, test_tags, runnable, route_code, timestamp)
+            self.testsRun += 1
     
     def _ensure_key(self, test_id, route_code):
         if test_id is None:
@@ -497,13 +498,18 @@ class StreamSummary(StreamResult):
         pass
 
     def _fail(self, case, test_tags, runnable, route_code, timestamp):
-        pass
+        case._outcome = 'addError'
+        message = _details_to_str(case._details, special="traceback")
+        self.errors.append((case, message))
 
     def _xfail(self, case, test_tags, runnable, route_code, timestamp):
-        pass
+        case._outcome = 'addExpectedFailure'
+        message = _details_to_str(case._details, special="traceback")
+        self.expectedFailures.append((case, message))
 
     def _uxsuccess(self, case, test_tags, runnable, route_code, timestamp):
-        pass
+        case._outcome = 'addUnexpectedSuccess'
+        self.unexpectedSuccesses.append(case)
 
     def wasSuccessful(self):
         """Return False if any failure has occured.
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 8e4fc5e..183b184 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -701,6 +701,7 @@ class TestStreamSummary(TestCase):
         result.status("baz", "exists")
         result.stopTestRun()
         self.assertEqual(True, result.wasSuccessful())
+        self.assertEqual(3, result.testsRun)
         # Tests inprogress at stopTestRun trigger a failure.
         result.startTestRun()
         result.status("foo", "inprogress")
@@ -730,6 +731,59 @@ class TestStreamSummary(TestCase):
         self.assertEqual("foo.bar", result.skipped[0][0].id())
         self.assertEqual(_u("Missing dependency"), result.skipped[0][1])
 
+    def _report_files(self, result):
+        result.file("some log.txt", _b("1234 log message"), eof=True,
+            mime_type="text/plain; charset=utf8", test_id="foo.bar")
+        result.file("traceback", _b("""Traceback (most recent call last):
+  File "testtools/tests/test_testresult.py", line 607, in test_stopTestRun
+      AllMatch(Equals([('startTestRun',), ('stopTestRun',)])))
+testtools.matchers._impl.MismatchError: Differences: [
+[('startTestRun',), ('stopTestRun',)] != []
+[('startTestRun',), ('stopTestRun',)] != []
+]
+"""), eof=True, mime_type="text/plain; charset=utf8", test_id="foo.bar")
+
+    files_message = Equals(_u("""some log.txt: {{{1234 log message}}}
+
+Traceback (most recent call last):
+  File "testtools/tests/test_testresult.py", line 607, in test_stopTestRun
+      AllMatch(Equals([('startTestRun',), ('stopTestRun',)])))
+testtools.matchers._impl.MismatchError: Differences: [
+[('startTestRun',), ('stopTestRun',)] != []
+[('startTestRun',), ('stopTestRun',)] != []
+]
+"""))
+
+    def test_status_fail(self):
+        # when fail is seen, a synthetic test is reported with all files
+        # attached shown as the message.
+        result = StreamSummary()
+        result.startTestRun()
+        self._report_files(result)
+        result.status("foo.bar", "fail")
+        self.assertThat(result.errors, HasLength(1))
+        self.assertEqual("foo.bar", result.errors[0][0].id())
+        self.assertThat(result.errors[0][1], self.files_message)
+
+    def test_status_xfail(self):
+        # when xfail is seen, a synthetic test is reported with all files
+        # attached shown as the message.
+        result = StreamSummary()
+        result.startTestRun()
+        self._report_files(result)
+        result.status("foo.bar", "xfail")
+        self.assertThat(result.expectedFailures, HasLength(1))
+        self.assertEqual("foo.bar", result.expectedFailures[0][0].id())
+        self.assertThat(result.expectedFailures[0][1], self.files_message)
+
+    def test_status_uxsuccess(self):
+        # when uxsuccess is seen, a synthetic test is reported.
+        result = StreamSummary()
+        result.startTestRun()
+        result.status("foo.bar", "uxsuccess")
+        self.assertThat(result.unexpectedSuccesses, HasLength(1))
+        self.assertEqual("foo.bar", result.unexpectedSuccesses[0].id())
+
 
 class TestTestResult(TestCase):
     """Tests for 'TestResult'."""
