Bottom: 0daf82bfb9cf39d690c7a193e5fbdb56b504e686
Top:    eb044ce2597eb7d172f189f084ffae4567457c84
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-18 19:18:42 +1300

Refresh of stream-to-extended-result

---

diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index b01f8b2..fda4a5d 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -1196,7 +1196,10 @@ class StreamToExtendedDecorator(StreamResult):
     """
 
     def __init__(self, decorated):
-        self.decorated = decorated
+        self.decorated = ExtendedToOriginalDecorator(decorated)
+
+    def estimate(self, *args, **kwargs):
+        """Not passed on."""
 
 
 class TestResultDecorator(object):
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 29dedab..3ed2da6 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -462,6 +462,15 @@ class TestTestResultDecoratorContract(TestCase, StartTestRunContract):
         return TestResultDecorator(TestResult())
 
 
+# DetailsContract because ExtendedToStreamDecorator follows Python for
+# uxsuccess handling.
+class TestStreamToExtendedContract(TestCase, DetailsContract):
+
+    def makeResult(self):
+        return ExtendedToStreamDecorator(
+            StreamToExtendedDecorator(ExtendedTestResult()))
+
+
 class TestStreamResultContract(object):
 
     def _make_result(self):
