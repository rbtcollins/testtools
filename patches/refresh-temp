Bottom: 09bfaecb222862871428e972813aadbbead5a50b
Top:    838256fd1fcc7b7dc1e84f092ac8ac5cb8794a9d
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-03-09 00:22:35 +1300

Refresh of detect-incomplete-tests

---

diff --git a/NEWS b/NEWS
index 4c300de..f950e85 100644
--- a/NEWS
+++ b/NEWS
@@ -28,6 +28,10 @@ Improvements
   ``StreamResult`` objects (each of which receives all the events).
   (Robert Collins)
 
+* New support class ``IncompleteTestDetector`` which tracks tests that have
+  emitted output but not completed, and synthesises a ``fail`` event for them
+  when ``stopTestRun`` is called. (Robert Collins)
+
 * New support class ``StreamSummary`` which summarises a ``StreamResult``
   stream compatibly with ``TestResult`` code. (Robert Collins)
 
diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index ec62287..e031c17 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -187,6 +187,17 @@ is observed. Aborting multiple workers in a distributed environment requires
 hooking whatever signalling mechanism the distributed environment has up to
 a ``TestControl`` in each worker process.
 
+IncompleteTestDetector
+----------------------
+
+This ``StreamResult`` filter tracks tests that have emitted events but not
+completed (whether with an error or not). When ``stopTestRun`` is called, these
+outstanding tests have a ``fail`` event generated. This is useful to permit
+analysers of streams to assume that all tests will complete - as long as there
+is an ``IncompleteTestDetector`` in the processing chain within a single
+process, code can allow it to be responsible for detecting hung or crashed
+tests.
+
 StreamToDict
 ------------
 
diff --git a/testtools/__init__.py b/testtools/__init__.py
index 8b45e5e..a395257 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -11,6 +11,7 @@ __all__ = [
     'ExpectedException',
     'ExtendedToOriginalDecorator',
     'FixtureSuite',
+    'IncompleteTestDetector',
     'iterate_tests',
     'MultipleExceptions',
     'MultiTestResult',
@@ -74,6 +75,7 @@ else:
     from testtools.testresult import (
         CopyStreamResult,
         ExtendedToOriginalDecorator,
+        IncompleteTestDetector,
         MultiTestResult,
         StreamFailFast,
         StreamResult,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index cc00e57..6511647 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -5,6 +5,7 @@
 __all__ = [
     'CopyStreamResult',
     'ExtendedToOriginalDecorator',
+    'IncompleteTestDetector',
     'MultiTestResult',
     'StreamFailFast',
     'StreamResult',
@@ -22,6 +23,7 @@ __all__ = [
 from testtools.testresult.real import (
     CopyStreamResult,
     ExtendedToOriginalDecorator,
+    IncompleteTestDetector,
     MultiTestResult,
     StreamFailFast,
     StreamResult,
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index fde4a0d..1ce8a6b 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -5,6 +5,7 @@
 __metaclass__ = type
 __all__ = [
     'ExtendedToOriginalDecorator',
+    'IncompleteTestDetector',
     'MultiTestResult',
     'StreamFailFast',
     'StreamResult',
@@ -402,6 +403,14 @@ class CopyStreamResult(StreamResult):
         domap(methodcaller('status', *args, **kwargs), self.targets)
 
 
+class IncompleteTestDetector(CopyStreamResult):
+    """Detect tests that are incomplete when stopTestRun is called.
+
+    Such tests have a ``fail`` result generated and forwarded before
+    the ``stopTestRun`` event is forwarded.
+    """
+
+    
 class StreamFailFast(StreamResult):
     """Call the supplied callback if an error is seen in a stream."""
