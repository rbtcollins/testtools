Bottom: ef3f5cc8efb9bce833be0fa3c18013a2c49e878a
Top:    eb044ce2597eb7d172f189f084ffae4567457c84
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-18 15:34:54 +1300

Add an adapter to adapt StreamResult event streams into ExtendedTestResult.

This permits running existing tools like test runners and reporters with
StreamResult generating test runs adapting any unittest or testtools compatible
TestResult into a StreamResult.


---

diff --git a/NEWS b/NEWS
index d168452..891f2cd 100644
--- a/NEWS
+++ b/NEWS
@@ -36,6 +36,11 @@ Improvements
   created to support that.
   (Robert Collins)
 
+* New support class ``StreamToExtendedDecorator`` which translates
+  ``StreamResult`` API calls into ``ExtendedTestResult`` (or any older
+  ``TestResult``) calls. This permits using un-migrated result objects with
+  new runners / tests. (Robert Collins)
+
 * New test support class ``testtools.testresult.doubles.StreamResult``, which
   captures all the StreamResult events. (Robert Collins)
 
diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index 84c92e3..733f95d 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -170,6 +170,14 @@ This is useful when a ``StreamResult`` stream is desired, but you cannot
 be sure that the tests which will run have been updated to the ``StreamResult``
 API.
 
+StreamToExtendedDecorator
+-------------------------
+
+This is a simple converter that emits the ``ExtendedTestResult`` API in
+response to events from the ``StreamResult`` API. Useful when outputting
+``StreamResult`` events from a ``TestCase`` but the supplied ``TestResult``
+does not support the ``status`` and ``file`` methods.
+
 ThreadsafeStreamResult
 ----------------------
 
diff --git a/testtools/__init__.py b/testtools/__init__.py
index 1850162..8524221 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -30,6 +30,7 @@ __all__ = [
     'StreamFailfast',
     'StreamResult',
     'StreamSummary',
+    'StreamToExtendedDecorator',
     'TestControl',
     'ThreadsafeForwardingResult',
     'try_import',
@@ -77,6 +78,7 @@ else:
         StreamFailfast,
         StreamResult,
         StreamSummary,
+        StreamToExtendedDecorator,
         Tagger,
         TestByTestResult,
         TestControl,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index 45df0f2..8f93f15 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -10,6 +10,7 @@ __all__ = [
     'StreamFailfast',
     'StreamResult',
     'StreamSummary',
+    'StreamToExtendedDecorator',
     'Tagger',
     'TestByTestResult',
     'TestControl',
@@ -27,6 +28,7 @@ from testtools.testresult.real import (
     StreamFailfast,
     StreamResult,
     StreamSummary,
+    StreamToExtendedDecorator,
     Tagger,
     TestByTestResult,
     TestControl,
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index ede2faf..fda4a5d 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -1183,6 +1183,25 @@ class ExtendedToStreamDecorator(CopyStreamResult, StreamSummary, TestControl):
         self.__now = a_datetime
 
 
+class StreamToExtendedDecorator(StreamResult):
+    """Convert StreamResult API calls into ExtendedTestResult calls.
+
+    This will buffer all calls for all concurrently active tests, and
+    then flush each test as they complete.
+
+    Incomplete tests will be flushed as errors when the test run stops.
+
+    Non test file attachments are accumulated into a test called
+    'testtools.extradata' flushed at the end of the run.
+    """
+
+    def __init__(self, decorated):
+        self.decorated = ExtendedToOriginalDecorator(decorated)
+
+    def estimate(self, *args, **kwargs):
+        """Not passed on."""
+
+
 class TestResultDecorator(object):
     """General pass-through decorator.
 
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index c4f25ac..3ed2da6 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -26,6 +26,7 @@ from testtools import (
     StreamFailfast,
     StreamResult,
     StreamSummary,
+    StreamToExtendedDecorator,
     Tagger,
     TestCase,
     TestControl,
@@ -461,6 +462,15 @@ class TestTestResultDecoratorContract(TestCase, StartTestRunContract):
         return TestResultDecorator(TestResult())
 
 
+# DetailsContract because ExtendedToStreamDecorator follows Python for
+# uxsuccess handling.
+class TestStreamToExtendedContract(TestCase, DetailsContract):
+
+    def makeResult(self):
+        return ExtendedToStreamDecorator(
+            StreamToExtendedDecorator(ExtendedTestResult()))
+
+
 class TestStreamResultContract(object):
 
     def _make_result(self):
@@ -565,6 +575,12 @@ class TestStreamSummaryResultContract(TestCase, TestStreamResultContract):
         return StreamSummary()
 
 
+class TestStreamToExtendedDecoratorContract(TestCase, TestStreamResultContract):
+
+    def _make_result(self):
+        return StreamToExtendedDecorator(ExtendedTestResult())
+
+
 class TestStreamFailfastContract(TestCase, TestStreamResultContract):
 
     def _make_result(self):
