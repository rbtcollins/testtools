Bottom: b3b29f68fb97a86b02e46de51ddb4015b2dc6e20
Top:    5157c6ac129412a4f410be9da7d02d5d2e97308c
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-18 15:34:54 +1300

Add an adapter to adapt StreamResult event streams into ExtendedTestResult.

This permits running existing tools like test runners and reporters with
StreamResult generating test runs adapting any unittest or testtools compatible
TestResult into a StreamResult.


---

diff --git a/NEWS b/NEWS
index 3bb4b2b..7de24c2 100644
--- a/NEWS
+++ b/NEWS
@@ -43,6 +43,11 @@ Improvements
   separate consumer will be created to support that.
   (Robert Collins)
 
+* New support class ``StreamToExtendedDecorator`` which translates
+  ``StreamResult`` API calls into ``ExtendedTestResult`` (or any older
+  ``TestResult``) calls. This permits using un-migrated result objects with
+  new runners / tests. (Robert Collins)
+
 * New test support class ``testtools.testresult.doubles.StreamResult``, which
   captures all the StreamResult events. (Robert Collins)
 
diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index 4b60ace..736beff 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -187,6 +187,14 @@ This is useful when a ``StreamResult`` stream is desired, but you cannot
 be sure that the tests which will run have been updated to the ``StreamResult``
 API.
 
+StreamToExtendedDecorator
+-------------------------
+
+This is a simple converter that emits the ``ExtendedTestResult`` API in
+response to events from the ``StreamResult`` API. Useful when outputting
+``StreamResult`` events from a ``TestCase`` but the supplied ``TestResult``
+does not support the ``status`` and ``file`` methods.
+
 ThreadsafeStreamResult
 ----------------------
 
diff --git a/testtools/__init__.py b/testtools/__init__.py
index 73e60fd..6a965cd 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -31,6 +31,7 @@ __all__ = [
     'StreamResult',
     'StreamSummary',
     'StreamToDict',
+    'StreamToExtendedDecorator',
     'TestControl',
     'ThreadsafeForwardingResult',
     'try_import',
@@ -79,6 +80,7 @@ else:
         StreamResult,
         StreamSummary,
         StreamToDict,
+        StreamToExtendedDecorator,
         Tagger,
         TestByTestResult,
         TestControl,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index 2827f0b..8f0fd76 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -11,6 +11,7 @@ __all__ = [
     'StreamResult',
     'StreamSummary',
     'StreamToDict',
+    'StreamToExtendedDecorator',
     'Tagger',
     'TestByTestResult',
     'TestControl',
@@ -29,6 +30,7 @@ from testtools.testresult.real import (
     StreamResult,
     StreamSummary,
     StreamToDict,
+    StreamToExtendedDecorator,
     Tagger,
     TestByTestResult,
     TestControl,
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 6980cc3..740ed49 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -1259,6 +1259,46 @@ class ExtendedToStreamDecorator(CopyStreamResult, StreamSummary, TestControl):
         return super(ExtendedToStreamDecorator, self).wasSuccessful()
 
 
+class StreamToExtendedDecorator(StreamResult):
+    """Convert StreamResult API calls into ExtendedTestResult calls.
+
+    This will buffer all calls for all concurrently active tests, and
+    then flush each test as they complete.
+
+    Incomplete tests will be flushed as errors when the test run stops.
+
+    Non test file attachments are accumulated into a test called
+    'testtools.extradata' flushed at the end of the run.
+    """
+
+    def __init__(self, decorated):
+        self.decorated = ExtendedToOriginalDecorator(decorated)
+        self.hook = StreamToDict(self._handle_tests)
+
+    def estimate(self, *args, **kwargs):
+        """Not passed on."""
+
+    def file(self, *args, **kwargs):
+        self.hook.file(*args, **kwargs)
+
+    def status(self, test_id, test_status, *args, **kwargs):
+        if test_status == 'exists':
+            return
+        self.hook.status(test_id, test_status, *args, **kwargs)
+
+    def startTestRun(self):
+        self.decorated.startTestRun()
+        self.hook.startTestRun()
+
+    def stopTestRun(self):
+        self.hook.stopTestRun()
+        self.decorated.stopTestRun()
+
+    def _handle_tests(self, test_dict):
+        case = test_dict_to_case(test_dict)
+        case.run(self.decorated)
+
+
 class TestResultDecorator(object):
     """General pass-through decorator.
 
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 9d5af0f..fb20884 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -27,6 +27,7 @@ from testtools import (
     StreamResult,
     StreamSummary,
     StreamToDict,
+    StreamToExtendedDecorator,
     Tagger,
     TestCase,
     TestControl,
@@ -466,6 +467,15 @@ class TestTestResultDecoratorContract(TestCase, StartTestRunContract):
         return TestResultDecorator(TestResult())
 
 
+# DetailsContract because ExtendedToStreamDecorator follows Python for
+# uxsuccess handling.
+class TestStreamToExtendedContract(TestCase, DetailsContract):
+
+    def makeResult(self):
+        return ExtendedToStreamDecorator(
+            StreamToExtendedDecorator(ExtendedTestResult()))
+
+
 class TestStreamResultContract(object):
 
     def _make_result(self):
@@ -576,6 +586,12 @@ class TestStreamToDictContract(TestCase, TestStreamResultContract):
         return StreamToDict(lambda x:None)
 
 
+class TestStreamToExtendedDecoratorContract(TestCase, TestStreamResultContract):
+
+    def _make_result(self):
+        return StreamToExtendedDecorator(ExtendedTestResult())
+
+
 class TestStreamFailfastContract(TestCase, TestStreamResultContract):
 
     def _make_result(self):
