Bottom: 682b02f28ed1b36d8ace11c6ef5bc17b2eb297e2
Top:    625e9c6c6423279504071cf7919095a1e2e20c99
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-19 21:19:25 +1300

Add a timestamping StreamResult.

This allows event generators to ignore the timestamp field, it can be added
into the stream - as long as it is before any buffering/queueing/blocking occur
it will be accurate enough.


---

diff --git a/NEWS b/NEWS
index eee061a..56136e4 100644
--- a/NEWS
+++ b/NEWS
@@ -20,6 +20,9 @@ Improvements
 * New class ``StreamResult`` which defines the API for the new result type.
   (Robert Collins)
 
+* New support class ``TimestampingStreamResult`` which adds a timestamp to
+  events with no timestamp. (Robert Collins)
+
 * New support class ``CopyStreamResult`` which forwards events onto multiple
   ``StreamResult`` objects (each of which receives all the events).
   (Robert Collins)
diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index 949e4a5..57ac59e 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -222,6 +222,15 @@ at once. Each method takes out a lock around the decorated result to prevent
 race conditions. The ``startTestRun`` and ``stopTestRun`` methods are not
 forwarded to prevent the decorated result having them called multiple times.
 
+TimestampingStreamResult
+------------------------
+
+This is a ``StreamResult`` decorator for adding timestamps to events that lack
+them. This allows writing the simplest possible generators of events and
+passing the events via this decorator to get timestamped data. As long as
+no buffering/queueing or blocking happen before the timestamper sees the event
+the timestamp will be as accurate as if the original event had it.
+
 TestResult.addSkip
 ------------------
 
diff --git a/testtools/__init__.py b/testtools/__init__.py
index 2bde458..f317e0b 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -35,6 +35,7 @@ __all__ = [
     'StreamToExtendedDecorator',
     'TestControl',
     'ThreadsafeForwardingResult',
+    'TimestampingStreamResult',
     'try_import',
     'try_imports',
     ]
@@ -90,6 +91,7 @@ else:
         TestResultDecorator,
         TextTestResult,
         ThreadsafeForwardingResult,
+        TimestampingStreamResult,
         )
     from testtools.testsuite import (
         ConcurrentTestSuite,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index 404aa3c..04960ba 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -19,6 +19,7 @@ __all__ = [
     'TestResultDecorator',
     'TextTestResult',
     'ThreadsafeForwardingResult',
+    'TimestampingStreamResult',
     ]
 
 from testtools.testresult.real import (
@@ -38,4 +39,5 @@ from testtools.testresult.real import (
     TestResultDecorator,
     TextTestResult,
     ThreadsafeForwardingResult,
+    TimestampingStreamResult,
     )
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 108538d..a50c52c 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -17,6 +17,7 @@ __all__ = [
     'TestResult',
     'TestResultDecorator',
     'ThreadsafeForwardingResult',
+    'TimestampingStreamResult',
     ]
 
 import datetime
@@ -1462,6 +1463,23 @@ class TestByTestResult(TestResult):
         self._details = details
 
 
+class TimestampingStreamResult(CopyStreamResult):
+    """A StreamResult decorator that assigns a timestamp when none is present.
+
+    This is convenient for ensuring events are timestamped.
+    """
+
+    def __init__(self, target):
+        super(TimestampingStreamResult, self).__init__([target])
+
+    def status(self, *args, **kwargs):
+        timestamp = kwargs.pop('timestamp', None)
+        if timestamp is None:
+            timestamp = datetime.datetime.now(utc)
+        super(TimestampingStreamResult, self).status(
+            *args, timestamp=timestamp, **kwargs)
+
+
 class _StringException(Exception):
     """An exception made from an arbitrary string."""
 
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 34d99d8..75461a4 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -36,6 +36,7 @@ from testtools import (
     TestByTestResult,
     TextTestResult,
     ThreadsafeForwardingResult,
+    TimestampingStreamResult,
     testresult,
     )
 from testtools.compat import (
@@ -2624,6 +2625,38 @@ class TestTagger(TestCase):
              ], result._events)
 
 
+class TestTimestampingStreamResult(TestCase):
+
+    def test_startTestRun(self):
+        result = TimestampingStreamResult(LoggingStreamResult())
+        result.startTestRun()
+        self.assertEqual([('startTestRun',)], result.targets[0]._events)
+
+    def test_stopTestRun(self):
+        result = TimestampingStreamResult(LoggingStreamResult())
+        result.stopTestRun()
+        self.assertEqual([('stopTestRun',)], result.targets[0]._events)
+
+    def test_status_no_timestamp(self):
+        result = TimestampingStreamResult(LoggingStreamResult())
+        result.status(test_id="A", test_status="B", test_tags="C",
+            runnable="D", file_name="E", file_bytes=b"F", eof=True,
+            mime_type="G", route_code="H")
+        events = result.targets[0]._events
+        self.assertThat(events, HasLength(1))
+        self.assertThat(events[0], HasLength(11))
+        self.assertEqual(
+            ("status", "A", "B", "C", "D", "E", b"F", True, "G", "H"),
+            events[0][:10])
+        self.assertNotEqual(None, events[0][10])
+        self.assertIsInstance(events[0][10], datetime.datetime)
+
+    def test_status_timestamp(self):
+        result = TimestampingStreamResult(LoggingStreamResult())
+        result.status(timestamp="F")
+        self.assertEqual("F", result.targets[0]._events[0][10])
+
+
 def test_suite():
     from unittest import TestLoader
     return TestLoader().loadTestsFromName(__name__)
