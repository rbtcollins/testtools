Bottom: c33034a945a920489e2f02f4db0c507843c43fad
Top:    6d1a8bd40a9980d5458968e8b8c64de47d617ede
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-03-08 23:51:16 +1300

Add IncompleteTestDetector, for detecting incomplete tests.


---

diff --git a/NEWS b/NEWS
index c465fa9..a2790eb 100644
--- a/NEWS
+++ b/NEWS
@@ -28,6 +28,10 @@ Improvements
   ``StreamResult`` objects (each of which receives all the events).
   (Robert Collins)
 
+* New support class ``IncompleteTestDetector`` which tracks tests that have
+  emitted output but not completed, and synthesises a ``fail`` event for them
+  when ``stopTestRun`` is called. (Robert Collins)
+
 * New ``TestCase`` decorator ``DecorateTestCaseResult`` that adapts the
   ``TestResult`` or ``StreamResult`` a case will be run with, for ensuring that
   a particular result object is used even if the runner running the test doesn't
diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index 514c4b7..2d748a1 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -183,6 +183,17 @@ Lastly we define the ``TestControl`` API which is used to provide the
 ``shouldStop`` and ``stop`` elements from ``TestResult``. Again, see the API
 documentation for ``testtools.TestControl``.
 
+IncompleteTestDetector
+----------------------
+
+This ``StreamResult`` filter tracks tests that have emitted events but not
+completed (whether with an error or not). When ``stopTestRun`` is called, these
+outstanding tests have a ``fail`` event generated. This is useful to permit
+analysers of streams to assume that all tests will complete - as long as there
+is an ``IncompleteTestDetector`` in the processing chain within a single
+process, code can allow it to be responsible for detecting hung or crashed
+tests.
+
 ThreadsafeStreamResult
 ----------------------
 
diff --git a/testtools/__init__.py b/testtools/__init__.py
index 188f991..4af4493 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -11,6 +11,7 @@ __all__ = [
     'ExpectedException',
     'ExtendedToOriginalDecorator',
     'FixtureSuite',
+    'IncompleteTestDetector',
     'iterate_tests',
     'MultipleExceptions',
     'MultiTestResult',
@@ -70,6 +71,7 @@ else:
     from testtools.testresult import (
         CopyStreamResult,
         ExtendedToOriginalDecorator,
+        IncompleteTestDetector,
         MultiTestResult,
         StreamResult,
         Tagger,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index f1ec047..38c9544 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -5,6 +5,7 @@
 __all__ = [
     'CopyStreamResult',
     'ExtendedToOriginalDecorator',
+    'IncompleteTestDetector',
     'MultiTestResult',
     'StreamResult',
     'Tagger',
@@ -18,6 +19,7 @@ __all__ = [
 from testtools.testresult.real import (
     CopyStreamResult,
     ExtendedToOriginalDecorator,
+    IncompleteTestDetector,
     MultiTestResult,
     StreamResult,
     Tagger,
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 4268462..e5873f5 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -5,6 +5,7 @@
 __metaclass__ = type
 __all__ = [
     'ExtendedToOriginalDecorator',
+    'IncompleteTestDetector',
     'MultiTestResult',
     'StreamResult',
     'Tagger',
@@ -392,6 +393,16 @@ class CopyStreamResult(StreamResult):
         domap(methodcaller('status', *args, **kwargs), self.targets)
 
 
+class IncompleteTestDetector(CopyStreamResult):
+    """Detect tests that are incomplete when stopTestRun is called.
+
+    Such tests have a ``fail`` result generated and forwarded before
+    the ``stopTestRun`` event is forwarded.
+    """
+
+    
+
+
 class MultiTestResult(TestResult):
     """A test result that dispatches to many test results."""
