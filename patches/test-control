Bottom: f3cb66112e35dfb3fb7ce2d5156ccb087e498c47
Top:    651aba783483a013091bf86cba4cd0feb7430132
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-17 16:12:38 +1300

Add a dedicated interface for controlling an in-progress TestRun.


---

diff --git a/NEWS b/NEWS
index 0b9ebc3..3a11e8c 100644
--- a/NEWS
+++ b/NEWS
@@ -20,6 +20,12 @@ Improvements
   ``StreamResult`` objects (each of which receives all the events).
   (Robert Collins)
 
+* New support class ``TestControl`` which permits cancelling an in-progress
+  run. (Robert Collins)
+
+* New support class ``StreamFailfast`` which calls a ``TestControl`` instance
+  to abort the test run when a failure is detected. (Robert Collins)
+
 * New test support class ``testtools.testresult.doubles.StreamResult``, which
   captures all the StreamResult events. (Robert Collins)
 
diff --git a/doc/for-framework-folk.rst b/doc/for-framework-folk.rst
index 3bb4222..492e9b7 100644
--- a/doc/for-framework-folk.rst
+++ b/doc/for-framework-folk.rst
@@ -155,7 +155,11 @@ TestControl
 
 Lastly we define the ``TestControl`` API which is used to provide the
 ``shouldStop`` and ``stop`` elements from ``TestResult``. Again, see the API
-documentation for ``testtools.TestControl``.
+documentation for ``testtools.TestControl``. ``TestControl`` can be paired with
+a ``StreamFailfast`` to trigger failing aborting a test run when a failure
+is observed. Aborting multiple workers in a distributed environment requires
+hooking whatever signalling mechanism the distributed environment has up to
+a ``TestControl`` in each worker process.
 
 ThreadsafeStreamResult
 ----------------------
diff --git a/testtools/__init__.py b/testtools/__init__.py
index 2ea5542..3caba55 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -26,8 +26,10 @@ __all__ = [
     'skip',
     'skipIf',
     'skipUnless',
+    'StreamFailfast',
     'StreamResult',
     'StreamSummary',
+    'TestControl',
     'ThreadsafeForwardingResult',
     'try_import',
     'try_imports',
@@ -70,10 +72,12 @@ else:
         CopyStreamResult,
         ExtendedToOriginalDecorator,
         MultiTestResult,
+        StreamFailfast,
         StreamResult,
         StreamSummary,
         Tagger,
         TestByTestResult,
+        TestControl,
         TestResult,
         TestResultDecorator,
         TextTestResult,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index 9aa6b7e..7b0cc3a 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -6,10 +6,12 @@ __all__ = [
     'CopyStreamResult',
     'ExtendedToOriginalDecorator',
     'MultiTestResult',
+    'StreamFailfast',
     'StreamResult',
     'StreamSummary',
     'Tagger',
     'TestByTestResult',
+    'TestControl',
     'TestResult',
     'TestResultDecorator',
     'TextTestResult',
@@ -20,10 +22,12 @@ from testtools.testresult.real import (
     CopyStreamResult,
     ExtendedToOriginalDecorator,
     MultiTestResult,
+    StreamFailfast,
     StreamResult,
     StreamSummary,
     Tagger,
     TestByTestResult,
+    TestControl,
     TestResult,
     TestResultDecorator,
     TextTestResult,
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index fe49701..d86e5ef 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -6,8 +6,11 @@ __metaclass__ = type
 __all__ = [
     'ExtendedToOriginalDecorator',
     'MultiTestResult',
+    'StreamFailfast',
     'StreamResult',
+    'StreamSummary',
     'Tagger',
+    'TestControl',
     'TestResult',
     'TestResultDecorator',
     'ThreadsafeForwardingResult',
@@ -409,6 +412,18 @@ class CopyStreamResult(object):
         domap(methodcaller('status', *args, **kwargs), self.targets)
 
 
+class StreamFailfast(StreamResult):
+    """Call the supplied callback if an error is seen in a stream."""
+
+    def __init__(self, callback):
+        self.callback = callback
+
+    def status(self, test_id, test_status, test_tags=None, runnable=True,
+        route_code=None, timestamp=None):
+        if test_status in ('uxsuccess', 'fail'):
+            self.callback()
+
+
 class StreamSummary(StreamResult):
     """A specialised StreamResult that summarises a stream.
     
@@ -522,6 +537,23 @@ class StreamSummary(StreamResult):
             not self.expectedFailures and not self.unexpectedSuccesses)
 
 
+class TestControl(object):
+    """Controls a running test run, allowing it to be interrupted.
+    
+    :attribute shouldStop: If True, tests should no run and should instead
+        return without running. Similarly a TestSuite should abort running
+        and return immediately.
+    """
+
+    def __init__(self):
+        super(TestControl, self).__init__()
+        self.shouldStop = False
+
+    def stop(self):
+        """Indicate that tests should stop running."""
+        self.shouldStop = True
+
+
 class MultiTestResult(TestResult):
     """A test result that dispatches to many test results."""
 
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 183b184..11ed802 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -22,10 +22,12 @@ from testtools import (
     ExtendedToOriginalDecorator,
     MultiTestResult,
     PlaceHolder,
+    StreamFailfast,
     StreamResult,
     StreamSummary,
     Tagger,
     TestCase,
+    TestControl,
     TestResult,
     TestResultDecorator,
     TestByTestResult,
@@ -550,6 +552,12 @@ class TestStreamSummaryResultContract(TestCase, TestStreamResultContract):
         return StreamSummary()
 
 
+class TestStreamFailfastContract(TestCase, TestStreamResultContract):
+
+    def _make_result(self):
+        return StreamFailfast(lambda:None)
+
+
 class TestDoubleStreamResultEvents(TestCase):
 
     def test_startTestRun(self):
@@ -640,6 +648,47 @@ class TestCopyStreamResultCopies(TestCase):
                 ])))
 
 
+class TestStreamFailfast(TestCase):
+
+    def test_inprogress(self):
+        result = StreamFailfast(self.fail)
+        result.status('foo', 'inprogress')
+
+    def test_exists(self):
+        result = StreamFailfast(self.fail)
+        result.status('foo', 'exists')
+
+    def test_xfail(self):
+        result = StreamFailfast(self.fail)
+        result.status('foo', 'xfail')
+
+    def test_uxsuccess(self):
+        calls = []
+        def hook():
+            calls.append("called")
+        result = StreamFailfast(hook)
+        result.status('foo', 'uxsuccess')
+        result.status('foo', 'uxsuccess')
+        self.assertEqual(['called', 'called'], calls)
+
+    def test_success(self):
+        result = StreamFailfast(self.fail)
+        result.status('foo', 'success')
+
+    def test_fail(self):
+        calls = []
+        def hook():
+            calls.append("called")
+        result = StreamFailfast(hook)
+        result.status('foo', 'fail')
+        result.status('foo', 'fail')
+        self.assertEqual(['called', 'called'], calls)
+
+    def test_skip(self):
+        result = StreamFailfast(self.fail)
+        result.status('foo', 'skip')
+
+
 class TestStreamSummary(TestCase):
 
     def test_attributes(self):
@@ -785,6 +834,17 @@ testtools.matchers._impl.MismatchError: Differences: [
         self.assertEqual("foo.bar", result.unexpectedSuccesses[0].id())
 
 
+class TestTestControl(TestCase):
+
+    def test_default(self):
+        self.assertEqual(False, TestControl().shouldStop)
+
+    def test_stop(self):
+        control = TestControl()
+        control.stop()
+        self.assertEqual(True, control.shouldStop)
+
+
 class TestTestResult(TestCase):
     """Tests for 'TestResult'."""
