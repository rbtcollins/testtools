Bottom: 34b7cf766b70c1cd26451d346a34ba3cd45ccc18
Top:    77a292506b6d333a77ce8ebc5c6c56fdc2ee5742
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-16 11:48:03 +1300

Adds a CopyStreamResult which copies StreamResult events to multiple outputs.

This allows applying multiple terminal handlers to one stream.


---

diff --git a/NEWS b/NEWS
index 0820efc..0b9ebc3 100644
--- a/NEWS
+++ b/NEWS
@@ -16,6 +16,10 @@ Improvements
 * New class ``StreamResult`` which defines the API for the new result type.
   (Robert Collins)
 
+* New support class ``CopyStreamResult`` which forwards events onto multiple
+  ``StreamResult`` objects (each of which receives all the events).
+  (Robert Collins)
+
 * New test support class ``testtools.testresult.doubles.StreamResult``, which
   captures all the StreamResult events. (Robert Collins)
 
diff --git a/testtools/__init__.py b/testtools/__init__.py
index fa362af..9e64be2 100644
--- a/testtools/__init__.py
+++ b/testtools/__init__.py
@@ -4,6 +4,7 @@
 
 __all__ = [
     'clone_test_with_new_id',
+    'CopyStreamResult',
     'ConcurrentTestSuite',
     'ErrorHolder',
     'ExpectedException',
@@ -65,6 +66,7 @@ else:
         skipUnless,
         )
     from testtools.testresult import (
+        CopyStreamResult,
         ExtendedToOriginalDecorator,
         MultiTestResult,
         StreamResult,
diff --git a/testtools/testresult/__init__.py b/testtools/testresult/__init__.py
index bd1104f..f1ec047 100644
--- a/testtools/testresult/__init__.py
+++ b/testtools/testresult/__init__.py
@@ -3,6 +3,7 @@
 """Test result objects."""
 
 __all__ = [
+    'CopyStreamResult',
     'ExtendedToOriginalDecorator',
     'MultiTestResult',
     'StreamResult',
@@ -15,6 +16,7 @@ __all__ = [
     ]
 
 from testtools.testresult.real import (
+    CopyStreamResult,
     ExtendedToOriginalDecorator,
     MultiTestResult,
     StreamResult,
diff --git a/testtools/testresult/real.py b/testtools/testresult/real.py
index 34d97f0..a43727a 100644
--- a/testtools/testresult/real.py
+++ b/testtools/testresult/real.py
@@ -14,6 +14,7 @@ __all__ = [
     ]
 
 import datetime
+from operator import methodcaller
 import sys
 import unittest
 
@@ -369,6 +370,31 @@ class StreamResult(object):
         """
 
 
+class CopyStreamResult(object):
+    """Copies all event it receives to multiple results.
+    
+    This provides an easy facility for combining multiple StreamResults.
+    """
+
+    def __init__(self, targets):
+        self.targets = targets
+
+    def startTestRun(self):
+        map(methodcaller('startTestRun'), self.targets)
+
+    def stopTestRun(self):
+        map(methodcaller('stopTestRun'), self.targets)
+
+    def estimate(self, *args, **kwargs):
+        map(methodcaller('estimate', *args, **kwargs), self.targets)
+
+    def file(self, *args, **kwargs):
+        map(methodcaller('file', *args, **kwargs), self.targets)
+
+    def status(self, *args, **kwargs):
+        map(methodcaller('status', *args, **kwargs), self.targets)
+
+
 class MultiTestResult(TestResult):
     """A test result that dispatches to many test results."""
 
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index dceda9e..7ca1bdd 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -18,6 +18,7 @@ import warnings
 from extras import safe_hasattr
 
 from testtools import (
+    CopyStreamResult,
     ExtendedToOriginalDecorator,
     MultiTestResult,
     PlaceHolder,
@@ -48,6 +49,7 @@ from testtools.content import (
     )
 from testtools.content_type import ContentType, UTF8_TEXT
 from testtools.matchers import (
+    AllMatch,
     Contains,
     DocTestMatches,
     Equals,
@@ -528,6 +530,12 @@ class TestBaseStreamResultContract(TestCase, TestStreamResultContract):
         return StreamResult()
 
 
+class TestCopyStreamResultContract(TestCase, TestStreamResultContract):
+
+    def _make_result(self):
+        return CopyStreamResult([StreamResult(), StreamResult()])
+
+
 class TestDoubleStreamResultContract(TestCase, TestStreamResultContract):
 
     def _make_result(self):
@@ -578,6 +586,52 @@ class TestDoubleStreamResultEvents(TestCase):
             result._events)
 
 
+class TestCopyStreamResultCopies(TestCase):
+
+    def setUp(self):
+        super(TestCopyStreamResultCopies, self).setUp()
+        self.target1 = LoggingStreamResult()
+        self.target2 = LoggingStreamResult()
+        self.targets = [self.target1._events, self.target2._events]
+        self.result = CopyStreamResult([self.target1, self.target2])
+
+    def test_startTestRun(self):
+        self.result.startTestRun()
+        self.assertThat(self.targets, AllMatch(Equals([('startTestRun',)])))
+
+    def test_stopTestRun(self):
+        self.result.startTestRun()
+        self.result.stopTestRun()
+        self.assertThat(self.targets,
+            AllMatch(Equals([('startTestRun',), ('stopTestRun',)])))
+
+    def test_estimate(self):
+        self.result.startTestRun()
+        now = datetime.datetime.now(utc)
+        self.result.estimate(2, route_code='abc', timestamp=now)
+        self.assertThat(self.targets,
+            AllMatch(Equals([('startTestRun',), ('estimate', 2, 'abc', now)])))
+
+    def test_file(self):
+        self.result.startTestRun()
+        now = datetime.datetime.now(utc)
+        self.result.file("foo", "bar", eof=True, mime_type="text/json",
+            test_id="id", route_code='abc', timestamp=now)
+        self.assertThat(self.targets,
+            AllMatch(Equals([('startTestRun',),
+                ('file', 'foo', 'bar', True, 'text/json', 'id', 'abc', now)])))
+
+    def test_status(self):
+        self.result.startTestRun()
+        now = datetime.datetime.now(utc)
+        self.result.status("foo", "finished", test_tags=set(['tag']),
+            runnable=False, route_code='abc', timestamp=now)
+        self.assertThat(self.targets,
+            AllMatch(Equals([('startTestRun',),
+                ('status', 'foo', 'finished', set(['tag']), False, 'abc', now)
+                ])))
+
+
 class TestTestResult(TestCase):
     """Tests for 'TestResult'."""
