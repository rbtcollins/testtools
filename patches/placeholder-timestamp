Bottom: 5ea685cdd66a1eb2652ee9d6ead781c8cc4a6a5d
Top:    d23ccce2546a4025445fd116b8110574c99af48c
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-27 22:28:20 +1300

Add support for timestamp events to Placeholder objects.


---

diff --git a/NEWS b/NEWS
index cd9a370..7b0433d 100644
--- a/NEWS
+++ b/NEWS
@@ -29,6 +29,9 @@ Improvements
 * ``PlaceHolder`` can now hold tags, and applies them before, and removes them
   after, the test. (Robert Collins)
 
+* ``PlaceHolder`` can now hold timestamps, and applies them before the test and
+  then before the outcome. (Robert Collins)
+
 0.9.29
 ~~~~~~
 
diff --git a/testtools/testcase.py b/testtools/testcase.py
index 97158c0..59ceb13 100644
--- a/testtools/testcase.py
+++ b/testtools/testcase.py
@@ -618,7 +618,7 @@ class PlaceHolder(object):
     failureException = None
 
     def __init__(self, test_id, short_description=None, details=None,
-        outcome='addSuccess', error=None, tags=None):
+        outcome='addSuccess', error=None, tags=None, timestamps=(None, None)):
         """Construct a `PlaceHolder`.
 
         :param test_id: The id of the placeholder test.
@@ -627,6 +627,8 @@ class PlaceHolder(object):
         :param details: Outcome details as accepted by addSuccess etc.
         :param outcome: The outcome to call. Defaults to 'addSuccess'.
         :param tags: Tags to report for the test.
+        :param timestamps: A two-tuple of timestamps for the test start and
+            finish. Each timestamp may be None to indicate it is not known.
         """
         self._test_id = test_id
         self._short_description = short_description
@@ -635,6 +637,7 @@ class PlaceHolder(object):
         if error is not None:
             self._details['traceback'] = content.TracebackContent(error, self)
         self._tags = tags or set()
+        self._timestamps = timestamps
 
     def __call__(self, result=None):
         return self.run(result=result)
@@ -668,8 +671,12 @@ class PlaceHolder(object):
 
     def run(self, result=None):
         result = self._result(result)
+        if self._timestamps[0] is not None:
+            result.time(self._timestamps[0])
         result.tags(self._tags, set())
         result.startTest(self)
+        if self._timestamps[1] is not None:
+            result.time(self._timestamps[1])
         outcome = getattr(result, self._outcome)
         outcome(self, details=self._details)
         result.stopTest(self)
diff --git a/testtools/tests/test_testcase.py b/testtools/tests/test_testcase.py
index 915aa47..6698eba 100644
--- a/testtools/tests/test_testcase.py
+++ b/testtools/tests/test_testcase.py
@@ -135,6 +135,21 @@ class TestPlaceHolder(TestCase):
              ],
             result._events)
 
+    def test_supplies_timestamps(self):
+        test = PlaceHolder('foo', details={}, timestamps=["A", "B"])
+        result = ExtendedTestResult()
+        test.run(result)
+        self.assertEqual(
+            [('time', "A"),
+             ('tags', set(), set()),
+             ('startTest', test),
+             ('time', "B"),
+             ('addSuccess', test),
+             ('stopTest', test),
+             ('tags', set(), set()),
+             ],
+            result._events)
+
     def test_call_is_run(self):
         # A PlaceHolder can be called, in which case it behaves like run.
         test = self.makePlaceHolder()
