Bottom: fd95e19d033db6ea3781a3ee429f0ef3c60f36df
Top:    6be5ef03498256878029a56e11cc516ce8c6fca7
Author: Robert Collins <robertc@robertcollins.net>
Date:   2013-02-16 11:51:04 +1300

Adds a recording StreamResult for writing tests with.


---

diff --git a/NEWS b/NEWS
index 4387557..0820efc 100644
--- a/NEWS
+++ b/NEWS
@@ -16,6 +16,9 @@ Improvements
 * New class ``StreamResult`` which defines the API for the new result type.
   (Robert Collins)
 
+* New test support class ``testtools.testresult.doubles.StreamResult``, which
+  captures all the StreamResult events. (Robert Collins)
+
 0.9.29
 ~~~~~~
 
diff --git a/testtools/testresult/doubles.py b/testtools/testresult/doubles.py
index 1865e93..83c967e 100644
--- a/testtools/testresult/doubles.py
+++ b/testtools/testresult/doubles.py
@@ -6,6 +6,7 @@ __all__ = [
     'Python26TestResult',
     'Python27TestResult',
     'ExtendedTestResult',
+    'StreamResult',
     ]
 
 
@@ -148,3 +149,32 @@ class ExtendedTestResult(Python27TestResult):
 
     def wasSuccessful(self):
         return self._was_successful
+
+
+class StreamResult(object):
+    """A StreamResult implementation for testing.
+
+    All events are logged to _events.
+    """
+
+    def __init__(self):
+        self._events = []
+
+    def startTestRun(self):
+        self._events.append(('startTestRun',))
+
+    def stopTestRun(self):
+        self._events.append(('stopTestRun',))
+
+    def estimate(self, count, route_code=None, timestamp=None):
+        self._events.append(('estimate', count, route_code, timestamp))
+
+    def file(self, file_name, file_bytes, eof=False, mime_type=None,
+        test_id=None, route_code=None, timestamp=None):
+        self._events.append(('file', file_name, file_bytes, eof, mime_type,
+            test_id, route_code, timestamp))
+
+    def status(self, test_id, test_status, test_tags=None, runnable=True,
+        route_code=None, timestamp=None):
+        self._events.append(('status', test_id, test_status, test_tags,
+            runnable, route_code, timestamp))
diff --git a/testtools/tests/test_testresult.py b/testtools/tests/test_testresult.py
index 21f15fd..dceda9e 100644
--- a/testtools/tests/test_testresult.py
+++ b/testtools/tests/test_testresult.py
@@ -65,6 +65,7 @@ from testtools.testresult.doubles import (
     Python26TestResult,
     Python27TestResult,
     ExtendedTestResult,
+    StreamResult as LoggingStreamResult,
     )
 from testtools.testresult.real import (
     _details_to_str,
@@ -527,6 +528,56 @@ class TestBaseStreamResultContract(TestCase, TestStreamResultContract):
         return StreamResult()
 
 
+class TestDoubleStreamResultContract(TestCase, TestStreamResultContract):
+
+    def _make_result(self):
+        return LoggingStreamResult()
+
+
+class TestDoubleStreamResultEvents(TestCase):
+
+    def test_startTestRun(self):
+        result = LoggingStreamResult()
+        result.startTestRun()
+        self.assertEqual([('startTestRun',)], result._events)
+
+    def test_stopTestRun(self):
+        result = LoggingStreamResult()
+        result.startTestRun()
+        result.stopTestRun()
+        self.assertEqual([('startTestRun',), ('stopTestRun',)], result._events)
+
+    def test_estimate(self):
+        result = LoggingStreamResult()
+        result.startTestRun()
+        now = datetime.datetime.now(utc)
+        result.estimate(2, route_code='abc', timestamp=now)
+        self.assertEqual(
+            [('startTestRun',), ('estimate', 2, 'abc', now)], result._events)
+
+    def test_file(self):
+        result = LoggingStreamResult()
+        result.startTestRun()
+        now = datetime.datetime.now(utc)
+        result.file("foo", "bar", eof=True, mime_type="text/json",
+            test_id="id", route_code='abc', timestamp=now)
+        self.assertEqual(
+            [('startTestRun',),
+             ('file', 'foo', 'bar', True, 'text/json', 'id', 'abc', now)],
+            result._events)
+
+    def test_status(self):
+        result = LoggingStreamResult()
+        result.startTestRun()
+        now = datetime.datetime.now(utc)
+        result.status("foo", "finished", test_tags=set(['tag']),
+            runnable=False, route_code='abc', timestamp=now)
+        self.assertEqual(
+            [('startTestRun',),
+             ('status', 'foo', 'finished', set(['tag']), False, 'abc', now)],
+            result._events)
+
+
 class TestTestResult(TestCase):
     """Tests for 'TestResult'."""
